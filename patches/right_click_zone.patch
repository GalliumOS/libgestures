--- gestures/src/immediate_interpreter.cc	2015-03-02 13:09:35.312061676 -0700
+++ gestures.new/src/immediate_interpreter.cc	2015-03-10 11:28:38.925573150 -0600
@@ -1055,6 +1055,10 @@
       button_move_dist_(prop_reg, "Button Move Distance", 10.0),
       button_max_dist_from_expected_(prop_reg,
                                      "Button Max Distance From Expected", 20.0),
+      button_right_click_zone_enable_(prop_reg, 
+				      "Button Right Click Zone Enable", 1),
+      button_right_click_zone_size_(prop_reg, 
+				    "Button Right Click Zone Size", 20.0),
       keyboard_touched_timeval_high_(prop_reg, "Keyboard Touched Timeval High",
                                      0),
       keyboard_touched_timeval_low_(prop_reg, "Keyboard Touched Timeval Low",
@@ -2459,6 +2463,21 @@
   }
 }
 
+int ImmediateInterpreter::
+GetButtonTypeFromPosition(const HardwareState& hwstate) {
+  if (hwstate.finger_cnt <= 0 || hwstate.finger_cnt > 1 || 
+      !button_right_click_zone_enable_.val_) {
+    return GESTURES_BUTTON_LEFT;
+  }
+
+  const FingerState& fs = hwstate.fingers[0];
+  if (fs.position_x > hwprops_->right - button_right_click_zone_size_.val_) {
+    return GESTURES_BUTTON_RIGHT;
+  } 
+
+  return GESTURES_BUTTON_LEFT;
+}
+
 int ImmediateInterpreter::EvaluateButtonType(
     const HardwareState& hwstate, stime_t button_down_time) {
   // Handle T5R2/SemiMT touchpads
@@ -2470,9 +2489,15 @@
     return GESTURES_BUTTON_RIGHT;
   }
 
-  // Just return the hardware state button if no further analysis is needed.
-  if (!finger_button_click_.Update(hwstate, button_down_time))
+  // Just return the hardware state button, based on finger position,
+  // if no further analysis is needed.
+  bool finger_update = finger_button_click_.Update(hwstate, button_down_time);
+  if (!finger_update && hwprops_->is_button_pad && 
+      hwstate.buttons_down == GESTURES_BUTTON_LEFT) {
+    return GetButtonTypeFromPosition(hwstate);
+  } else if (!finger_update) {
     return hwstate.buttons_down;
+  }
   Log("EvaluateButtonType: R/C/H: %d/%d/%d",
       finger_button_click_.num_recent(),
       finger_button_click_.num_cold(),
--- gestures/include/gestures/include/immediate_interpreter.h	2015-03-02 13:09:35.304057676 -0700
+++ gestures.new/include/gestures/include/immediate_interpreter.h	2015-03-10 11:13:19.381589618 -0600
@@ -405,6 +405,10 @@
   // Sets pointing_.
   void UpdatePointingFingers(const HardwareState& hwstate);
 
+  // Gets the hardware button type (RIGHT, LEFT) based on the 
+  // first finger's position.
+  int GetButtonTypeFromPosition(const HardwareState& hwstate);
+
   // Returns the square of the distance that this contact has travelled since
   // fingers changed (origin=false) or since they touched down (origin=true).
   // If permit_warp is true, we ignore the GESTURES_FINGER_WARP_X/Y flags
@@ -769,6 +773,10 @@
   // Distance [mm] a finger can be away from it's expected location to be
   // considered part of the same finger group
   DoubleProperty button_max_dist_from_expected_;
+  // Flag to enable the right click on the right side of the hardware button
+  BoolProperty button_right_click_zone_enable_;
+  // The size of the right click zone on the right side of the hardware button
+  DoubleProperty button_right_click_zone_size_;
   // Timeval of time when keyboard was last touched. After the low one is set,
   // the two are converted into an stime_t and stored in keyboard_touched_.
   IntProperty keyboard_touched_timeval_high_;  // seconds
