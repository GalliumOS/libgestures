diff -urN libgestures/include/gestures/include/immediate_interpreter.h libgestures.fixed/include/gestures/include/immediate_interpreter.h
--- libgestures/include/gestures/include/immediate_interpreter.h	2015-07-07 00:00:39.198007842 -0600
+++ libgestures.fixed/include/gestures/include/immediate_interpreter.h	2015-07-06 22:17:30.913849757 -0600
@@ -588,6 +588,8 @@
 
   // If we have sent button down for the currently down button
   bool sent_button_down_;
+  // If we have sent tap down for the currently down button
+  int tap_button_down_;
 
   // If we haven't sent a button down by this time, send one
   stime_t button_down_timeout_;
diff -urN libgestures/src/immediate_interpreter.cc libgestures.fixed/src/immediate_interpreter.cc
--- libgestures/src/immediate_interpreter.cc	2015-07-07 00:00:39.198007842 -0600
+++ libgestures.fixed/src/immediate_interpreter.cc	2015-07-06 23:59:52.017161043 -0600
@@ -979,6 +979,7 @@
       button_type_(0),
       finger_button_click_(this),
       sent_button_down_(false),
+      tap_button_down_(GESTURES_BUTTON_NONE),
       button_down_timeout_(0.0),
       started_moving_time_(-1.0),
       gs_changed_time_(-1.0),
@@ -1149,6 +1150,17 @@
 }
 
 void ImmediateInterpreter::HandleTimerImpl(stime_t now, stime_t* timeout) {
+  if (tap_button_down_) {
+    ProduceGesture(Gesture(kGestureButtonsChange,
+			   state_buffer_.Get(1)->timestamp,
+			   now,
+			   0,
+			   tap_button_down_));
+    tap_button_down_ = 0;
+    *timeout = inter_tap_timeout_.val_;
+    return;
+  }
+  
   result_.type = kGestureTypeNull;
   // Tap-to-click always aborts when real button(s) are being used, so we
   // don't need to worry about conflicts with these two types of callback.
@@ -2082,10 +2094,26 @@
     stime_t* timeout) {
   unsigned down = 0;
   unsigned up = 0;
+  
   UpdateTapState(hwstate, gs_fingers, same_fingers, now, &down, &up, timeout);
   if (down == 0 && up == 0) {
     return;
   }
+  if (tap_button_down_) {
+    return;
+  }
+  if (down && up) {
+    /* hugegreenbug - 7.6.15
+       Split the down and up into seperate tap gestures
+       This prevents taps from "grabbing" onto windows
+       The timeout was chosen by trial and error
+    */
+    
+    *timeout = inter_tap_timeout_.val_/6.0f;
+    tap_button_down_ = down;
+    up = 0;
+  } 
+
   Log("UpdateTapGesture: Tap Generated");
   result_ = Gesture(kGestureButtonsChange,
                     state_buffer_.Get(1)->timestamp,
